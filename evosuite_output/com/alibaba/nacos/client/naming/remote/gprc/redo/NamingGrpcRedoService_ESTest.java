/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 02 02:08:55 GMT 2024
 */

package com.alibaba.nacos.client.naming.remote.gprc.redo;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.nacos.api.naming.pojo.Instance;
import com.alibaba.nacos.api.naming.pojo.ServiceInfo;
import com.alibaba.nacos.client.naming.remote.gprc.NamingGrpcClientProxy;
import com.alibaba.nacos.client.naming.remote.gprc.redo.NamingGrpcRedoService;
import com.alibaba.nacos.client.naming.remote.gprc.redo.data.InstanceRedoData;
import com.alibaba.nacos.client.naming.remote.gprc.redo.data.SubscriberRedoData;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NamingGrpcRedoService_ESTest extends NamingGrpcRedoService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NamingGrpcRedoService namingGrpcRedoService0 = new NamingGrpcRedoService((NamingGrpcClientProxy) null);
      namingGrpcRedoService0.cacheSubscriberForRedo("vG}0,>", "vG}0,>", "vG}0,>");
      namingGrpcRedoService0.subscriberRegistered("vG}0,>", "vG}0,>", "vG}0,>");
      boolean boolean0 = namingGrpcRedoService0.isSubscriberRegistered("vG}0,>", "vG}0,>", "vG}0,>");
      assertTrue(boolean0);
      assertFalse(namingGrpcRedoService0.isConnected());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NamingGrpcRedoService namingGrpcRedoService0 = new NamingGrpcRedoService((NamingGrpcClientProxy) null);
      namingGrpcRedoService0.cacheSubscriberForRedo("7p_^bYo;R*.p34RK{gE", "7p_^bYo;R*.p34RK{gE", "7p_^bYo;R*.p34RK{gE");
      boolean boolean0 = namingGrpcRedoService0.isSubscriberRegistered("7p_^bYo;R*.p34RK{gE", "7p_^bYo;R*.p34RK{gE", "7p_^bYo;R*.p34RK{gE");
      assertFalse(namingGrpcRedoService0.isConnected());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NamingGrpcRedoService namingGrpcRedoService0 = new NamingGrpcRedoService((NamingGrpcClientProxy) null);
      boolean boolean0 = namingGrpcRedoService0.isSubscriberRegistered("Grpc connection disconnect, mark to redo", "NONE", "{'OgMTTgStK<2Nihz`");
      assertFalse(boolean0);
      assertFalse(namingGrpcRedoService0.isConnected());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NamingGrpcRedoService namingGrpcRedoService0 = new NamingGrpcRedoService((NamingGrpcClientProxy) null);
      namingGrpcRedoService0.subscriberDeregister("Grpc connection disconnect, mark to redo", ", message='", "com.alibaba.nacos.client.naming.remote.gprc.redo.NamingGrpcRedoService");
      assertFalse(namingGrpcRedoService0.isConnected());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NamingGrpcRedoService namingGrpcRedoService0 = new NamingGrpcRedoService((NamingGrpcClientProxy) null);
      LinkedList<Instance> linkedList0 = new LinkedList<Instance>();
      namingGrpcRedoService0.cacheInstanceForRedo("GET", "ir(<^s2]pX%1ISBI&", (List<Instance>) linkedList0);
      assertFalse(namingGrpcRedoService0.isConnected());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NamingGrpcRedoService namingGrpcRedoService0 = new NamingGrpcRedoService((NamingGrpcClientProxy) null);
      Instance instance0 = new Instance();
      namingGrpcRedoService0.cacheInstanceForRedo(", weight=", " DCY\"1", instance0);
      assertFalse(namingGrpcRedoService0.isConnected());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NamingGrpcRedoService namingGrpcRedoService0 = new NamingGrpcRedoService((NamingGrpcClientProxy) null);
      namingGrpcRedoService0.getRegisteredInstancesByKey("tBc,-g`(ZnM$;&=kk(<G");
      assertFalse(namingGrpcRedoService0.isConnected());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NamingGrpcRedoService namingGrpcRedoService0 = new NamingGrpcRedoService((NamingGrpcClientProxy) null);
      namingGrpcRedoService0.subscriberRegistered("mark to redo completed", "com.alibaba.nacos.client.naming.grpc.redo", "");
      assertFalse(namingGrpcRedoService0.isConnected());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NamingGrpcRedoService namingGrpcRedoService0 = new NamingGrpcRedoService((NamingGrpcClientProxy) null);
      namingGrpcRedoService0.cacheSubscriberForRedo("7p_^bYo;R*.p34RK{gE", "7p_^bYo;R*.p34RK{gE", "7p_^bYo;R*.p34RK{gE");
      namingGrpcRedoService0.subscriberDeregister("7p_^bYo;R*.p34RK{gE", "7p_^bYo;R*.p34RK{gE", "7p_^bYo;R*.p34RK{gE");
      assertFalse(namingGrpcRedoService0.isConnected());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NamingGrpcRedoService namingGrpcRedoService0 = new NamingGrpcRedoService((NamingGrpcClientProxy) null);
      namingGrpcRedoService0.shutdown();
      assertFalse(namingGrpcRedoService0.isConnected());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NamingGrpcRedoService namingGrpcRedoService0 = new NamingGrpcRedoService((NamingGrpcClientProxy) null);
      namingGrpcRedoService0.removeSubscriberForRedo("M]}Vo$r", "mark to edo complted", "");
      assertFalse(namingGrpcRedoService0.isConnected());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NamingGrpcRedoService namingGrpcRedoService0 = new NamingGrpcRedoService((NamingGrpcClientProxy) null);
      namingGrpcRedoService0.removeInstanceForRedo("[{}] Fail to connect to server on start up, error message = {}, start up retry times left: {}", "_7");
      assertFalse(namingGrpcRedoService0.isConnected());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NamingGrpcRedoService namingGrpcRedoService0 = new NamingGrpcRedoService((NamingGrpcClientProxy) null);
      namingGrpcRedoService0.onDisConnect();
      assertFalse(namingGrpcRedoService0.isConnected());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NamingGrpcRedoService namingGrpcRedoService0 = new NamingGrpcRedoService((NamingGrpcClientProxy) null);
      assertFalse(namingGrpcRedoService0.isConnected());
      
      namingGrpcRedoService0.onConnected();
      assertTrue(namingGrpcRedoService0.isConnected());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NamingGrpcRedoService namingGrpcRedoService0 = new NamingGrpcRedoService((NamingGrpcClientProxy) null);
      boolean boolean0 = namingGrpcRedoService0.isConnected();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NamingGrpcRedoService namingGrpcRedoService0 = new NamingGrpcRedoService((NamingGrpcClientProxy) null);
      Instance instance0 = new Instance();
      namingGrpcRedoService0.cacheInstanceForRedo("mark to redo compleed", "mark to redo compleed", instance0);
      namingGrpcRedoService0.instanceRegistered("mark to redo compleed", "mark to redo compleed");
      assertFalse(namingGrpcRedoService0.isConnected());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NamingGrpcRedoService namingGrpcRedoService0 = new NamingGrpcRedoService((NamingGrpcClientProxy) null);
      Instance instance0 = new Instance();
      namingGrpcRedoService0.cacheInstanceForRedo("mark to redo compleed", "mark to redo compleed", instance0);
      namingGrpcRedoService0.instanceDeregistered("mark to redo compleed", "mark to redo compleed");
      assertFalse(namingGrpcRedoService0.isConnected());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NamingGrpcRedoService namingGrpcRedoService0 = new NamingGrpcRedoService((NamingGrpcClientProxy) null);
      namingGrpcRedoService0.cacheSubscriberForRedo("vG}0,>", "vG}0,>", "vG}0,>");
      Set<SubscriberRedoData> set0 = namingGrpcRedoService0.findSubscriberRedoData();
      assertEquals(1, set0.size());
      assertFalse(namingGrpcRedoService0.isConnected());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NamingGrpcRedoService namingGrpcRedoService0 = new NamingGrpcRedoService((NamingGrpcClientProxy) null);
      Instance instance0 = new Instance();
      namingGrpcRedoService0.cacheInstanceForRedo("mark to redo compleed", "mark to redo compleed", instance0);
      Set<InstanceRedoData> set0 = namingGrpcRedoService0.findInstanceRedoData();
      assertEquals(1, set0.size());
      assertFalse(namingGrpcRedoService0.isConnected());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NamingGrpcRedoService namingGrpcRedoService0 = new NamingGrpcRedoService((NamingGrpcClientProxy) null);
      namingGrpcRedoService0.cacheSubscriberForRedo("PEHq[TwKy[Y^", "jSPy-.", ">>lx[7]+2}");
      assertFalse(namingGrpcRedoService0.isConnected());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NamingGrpcRedoService namingGrpcRedoService0 = new NamingGrpcRedoService((NamingGrpcClientProxy) null);
      // Undeclared exception!
      try { 
        namingGrpcRedoService0.subscriberRegistered("", "VC}", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Param 'serviceName' is illegal, serviceName is blank
         //
         verifyException("com.alibaba.nacos.api.naming.utils.NamingUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NamingGrpcRedoService namingGrpcRedoService0 = new NamingGrpcRedoService((NamingGrpcClientProxy) null);
      // Undeclared exception!
      try { 
        namingGrpcRedoService0.subscriberDeregister("com.alibaba.nacos.client.naming.remote.gprc.redo.NamingGrpcRedoService", "", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Param 'groupName' is illegal, groupName is blank
         //
         verifyException("com.alibaba.nacos.api.naming.utils.NamingUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NamingGrpcRedoService namingGrpcRedoService0 = new NamingGrpcRedoService((NamingGrpcClientProxy) null);
      // Undeclared exception!
      try { 
        namingGrpcRedoService0.removeSubscriberForRedo((String) null, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Param 'serviceName' is illegal, serviceName is blank
         //
         verifyException("com.alibaba.nacos.api.naming.utils.NamingUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NamingGrpcRedoService namingGrpcRedoService0 = new NamingGrpcRedoService((NamingGrpcClientProxy) null);
      // Undeclared exception!
      try { 
        namingGrpcRedoService0.removeInstanceForRedo("", "]| nxoLspzA%=-=ZGu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Param 'serviceName' is illegal, serviceName is blank
         //
         verifyException("com.alibaba.nacos.api.naming.utils.NamingUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NamingGrpcRedoService namingGrpcRedoService0 = new NamingGrpcRedoService((NamingGrpcClientProxy) null);
      // Undeclared exception!
      try { 
        namingGrpcRedoService0.isSubscriberRegistered((String) null, (String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Param 'serviceName' is illegal, serviceName is blank
         //
         verifyException("com.alibaba.nacos.api.naming.utils.NamingUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NamingGrpcRedoService namingGrpcRedoService0 = new NamingGrpcRedoService((NamingGrpcClientProxy) null);
      // Undeclared exception!
      try { 
        namingGrpcRedoService0.instanceRegistered((String) null, "Grpc connection disconnect, mark to redo");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Param 'serviceName' is illegal, serviceName is blank
         //
         verifyException("com.alibaba.nacos.api.naming.utils.NamingUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NamingGrpcRedoService namingGrpcRedoService0 = new NamingGrpcRedoService((NamingGrpcClientProxy) null);
      // Undeclared exception!
      try { 
        namingGrpcRedoService0.instanceDeregistered("", "[{}] Fail to connect to server on start up, error message = {}, start up retry times left: {}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Param 'serviceName' is illegal, serviceName is blank
         //
         verifyException("com.alibaba.nacos.api.naming.utils.NamingUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NamingGrpcRedoService namingGrpcRedoService0 = new NamingGrpcRedoService((NamingGrpcClientProxy) null);
      // Undeclared exception!
      try { 
        namingGrpcRedoService0.instanceDeregister("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Param 'serviceName' is illegal, serviceName is blank
         //
         verifyException("com.alibaba.nacos.api.naming.utils.NamingUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NamingGrpcRedoService namingGrpcRedoService0 = new NamingGrpcRedoService((NamingGrpcClientProxy) null);
      // Undeclared exception!
      try { 
        namingGrpcRedoService0.getRegisteredInstancesByKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NamingGrpcRedoService namingGrpcRedoService0 = new NamingGrpcRedoService((NamingGrpcClientProxy) null);
      // Undeclared exception!
      try { 
        namingGrpcRedoService0.cacheSubscriberForRedo("", "q(NK34%&ClsxX9_v4[`", "YWe=B+G*7~A|,(7;g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Param 'serviceName' is illegal, serviceName is blank
         //
         verifyException("com.alibaba.nacos.api.naming.utils.NamingUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NamingGrpcRedoService namingGrpcRedoService0 = new NamingGrpcRedoService((NamingGrpcClientProxy) null);
      ServiceInfo serviceInfo0 = new ServiceInfo();
      List<Instance> list0 = serviceInfo0.getHosts();
      LinkedList<Instance> linkedList0 = new LinkedList<Instance>(list0);
      // Undeclared exception!
      try { 
        namingGrpcRedoService0.cacheInstanceForRedo("", "Gyx", (List<Instance>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Param 'serviceName' is illegal, serviceName is blank
         //
         verifyException("com.alibaba.nacos.api.naming.utils.NamingUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NamingGrpcRedoService namingGrpcRedoService0 = new NamingGrpcRedoService((NamingGrpcClientProxy) null);
      Instance instance0 = new Instance();
      // Undeclared exception!
      try { 
        namingGrpcRedoService0.cacheInstanceForRedo((String) null, (String) null, instance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Param 'serviceName' is illegal, serviceName is blank
         //
         verifyException("com.alibaba.nacos.api.naming.utils.NamingUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NamingGrpcRedoService namingGrpcRedoService0 = new NamingGrpcRedoService((NamingGrpcClientProxy) null);
      Instance instance0 = new Instance();
      namingGrpcRedoService0.cacheInstanceForRedo("mark to redo compleed", "mark to redo compleed", instance0);
      namingGrpcRedoService0.instanceDeregister("mark to redo compleed", "mark to redo compleed");
      assertFalse(namingGrpcRedoService0.isConnected());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NamingGrpcRedoService namingGrpcRedoService0 = new NamingGrpcRedoService((NamingGrpcClientProxy) null);
      namingGrpcRedoService0.instanceDeregister("GET", "GET");
      assertFalse(namingGrpcRedoService0.isConnected());
  }
}
